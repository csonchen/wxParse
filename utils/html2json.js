"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __placeImgeUrlHttps = "https";
var __emojisReg = '';
var __emojisBaseSrc = '';
var __emojis = {};
var wxDiscode_1 = require("./wxDiscode");
var htmlparser_1 = require("./htmlparser");
var block = htmlparser_1.makeMap("br,a,code,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video");
var inline = htmlparser_1.makeMap("abbr,acronym,applet,b,basefont,bdo,big,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");
var closeSelf = htmlparser_1.makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");
function removeDOCTYPE(html) {
    return html
        .replace(/<\?xml.*\?>\n/, '')
        .replace(/<.*!doctype.*\>\n/, '')
        .replace(/<.*!DOCTYPE.*\>\n/, '');
}
function trimHtml(html) {
    return html
        .replace(/\r?\n+/g, '')
        .replace(/<!--.*?-->/ig, '')
        .replace(/\/\*.*?\*\//ig, '')
        .replace(/[ ]+</ig, '<');
}
function html2json(html, bindName) {
    html = removeDOCTYPE(html);
    html = trimHtml(html);
    html = wxDiscode_1.default.strDiscode(html);
    var bufArray = [];
    var results = {
        node: bindName,
        nodes: [],
        images: [],
        imageUrls: []
    };
    var index = 0;
    htmlparser_1.HTMLParser(html, {
        start: function (tag, attrs, unary) {
            var node = {
                node: 'element',
                tag: tag,
            };
            if (bufArray.length === 0) {
                node.index = index.toString();
                index += 1;
            }
            else {
                var parent = bufArray[0];
                if (parent.nodes === undefined) {
                    parent.nodes = [];
                }
                node.index = parent.index + '.' + parent.nodes.length;
            }
            if (block[tag]) {
                node.tagType = "block";
            }
            else if (inline[tag]) {
                node.tagType = "inline";
            }
            else if (closeSelf[tag]) {
                node.tagType = "closeSelf";
            }
            if (attrs.length !== 0) {
                node.attr = attrs.reduce(function (pre, attr) {
                    var name = attr.name;
                    var value = attr.value;
                    if (name == 'class') {
                        node.classStr = value;
                    }
                    if (name == 'style') {
                        node.styleStr = value;
                    }
                    if (value.match(/ /)) {
                        value = value.split(' ');
                    }
                    if (pre[name]) {
                        if (Array.isArray(pre[name])) {
                            pre[name].push(value);
                        }
                        else {
                            pre[name] = [pre[name], value];
                        }
                    }
                    else {
                        pre[name] = value;
                    }
                    return pre;
                }, {});
            }
            if (node.tag === 'img') {
                node.imgIndex = results.images.length;
                var imgUrl = node.attr ? node.attr.src : undefined;
                if (imgUrl && node.attr) {
                    imgUrl = wxDiscode_1.default.urlToHttpUrl(imgUrl, __placeImgeUrlHttps);
                    node.attr.src = imgUrl;
                    node.from = bindName;
                    results.images.push(node);
                    results.imageUrls.push(imgUrl);
                }
            }
            if (node.tag === 'font') {
                var fontSize = ['x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', '-webkit-xxx-large'];
                var styleAttrs = {
                    'color': 'color',
                    'face': 'font-family',
                    'size': 'font-size'
                };
                if (node.attr && !node.attr.style)
                    node.attr.style = [];
                if (!node.styleStr)
                    node.styleStr = '';
                for (var key in styleAttrs) {
                    if (node.attr && node.attr[key]) {
                        var value = key === 'size' ? fontSize[Number(node.attr[key]) - 1] : node.attr[key];
                        Array.isArray(node.attr.style) && node.attr.style.push(styleAttrs[key]);
                        Array.isArray(node.attr.style) && node.attr.style.push(value);
                        node.styleStr += styleAttrs[key] + ': ' + value + ';';
                    }
                }
            }
            if (node.tag === 'source') {
                results.source = node.attr ? node.attr.src : undefined;
            }
            if (unary) {
                var parent = bufArray[0] || results;
                if (parent.nodes === undefined) {
                    parent.nodes = [];
                }
                parent.nodes.push(node);
            }
            else {
                bufArray.unshift(node);
            }
        },
        end: function (tag) {
            var node = bufArray.shift();
            if (node.tag !== tag)
                console.error('invalid state: mismatch end tag');
            if (node.tag === 'video' && results.source) {
                node.attr.src = results.source;
                delete results.source;
            }
            if (bufArray.length === 0) {
                results.nodes.push(node);
            }
            else {
                var parent = bufArray[0];
                if (parent.nodes === undefined) {
                    parent.nodes = [];
                }
                parent.nodes.push(node);
            }
        },
        chars: function (text) {
            var node = {
                node: 'text',
                text: text,
                textArray: transEmojiStr(text)
            };
            if (bufArray.length === 0) {
                node.index = index.toString();
                index += 1;
                results.nodes.push(node);
            }
            else {
                var parent = bufArray[0];
                if (parent.nodes === undefined) {
                    parent.nodes = [];
                }
                node.index = parent.index + '.' + parent.nodes.length;
                parent.nodes.push(node);
            }
        },
        comment: function () {
        },
    });
    return results;
}
;
function transEmojiStr(str) {
    var emojiObjs = [];
    if (__emojisReg.length == 0 || !__emojis) {
        var emojiObj = {};
        emojiObj.node = "text";
        emojiObj.text = str;
        array = [emojiObj];
        return array;
    }
    str = str.replace(/\[([^\[\]]+)\]/g, ':$1:');
    var eReg = new RegExp("[:]");
    var array = str.split(eReg);
    for (var i = 0; i < array.length; i++) {
        var ele = array[i];
        var emojiObj = {};
        if (__emojis[ele]) {
            emojiObj.node = "element";
            emojiObj.tag = "emoji";
            emojiObj.text = __emojis[ele];
            emojiObj.baseSrc = __emojisBaseSrc;
        }
        else {
            emojiObj.node = "text";
            emojiObj.text = ele;
        }
        emojiObjs.push(emojiObj);
    }
    return emojiObjs;
}
function emojisInit(reg, baseSrc, emojis) {
    if (reg === void 0) { reg = ''; }
    if (baseSrc === void 0) { baseSrc = "/wxParse/emojis/"; }
    __emojisReg = reg;
    __emojisBaseSrc = baseSrc;
    __emojis = emojis;
}
exports.default = {
    html2json: html2json,
    emojisInit: emojisInit
};
//# sourceMappingURL=data:application/json;base64,